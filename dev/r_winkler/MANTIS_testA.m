% (C) 2015 Robert Winkler. License: GPL version 2 or version 3
% (re)start EIDORS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if isempty(getenv('EIDORSINIT'))
  addpath(sprintf('%s/MANTIS',pwd));                                      % MANTIS functions used in EIDORS
  setenv('EIDORSINIT','1');
else
  %eidors_cache clear
end
clear; clc; %close all;
eidors_msg('log_level',0);
eidors_cache('debug_off');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Choose user parameters here %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
el.Npp = 16;                                                              % electrodes per plane
el.P   = 2;                                                               % electrode plane

dom.Radius  = 1;                                                          % domain x-y radius/limit
dom.Height  = 1.25;                                                       % domain height
dom.FEMscal = 2;   % (1=very fine(memory heavy), 3=very coarse)           % scaling factor for the FEM mesh refinement (generated by Netgen)
                                                                          % WARNING: Contact impedance estimates get bad if electrodes are modelled too coarsely
                                                                          
el.Height = 0.05;                                                         % electrode heights
el.Width  = 0.05;                                                         % electrode widths

el.Sizes     = el.Height*el.Width*ones(el.Npp*el.P,1);                    % electrode surface areas
el.Impedance = num2cell(1.0*el.Sizes);                                    % contact impedances for reference computations (choose small)

% some initializations for the object and measurement setting %%%%%%%%%%%%%
setting.RelNoise = 0.003; % 0.3% rel. noise                               % rel. measurement noise level
setting.CurrAmp  = 0.5;                                                   % current amplitude
setting.CurrPat  = '{ad}'; % ad=acja,op=oppos,trig=trigon,mono=unit vec.  % current patterns

%%% VERSION 1A: do adjacent measurements, no driving electrodes
setting.MeasPat = '{ad}';   % mono = measure at each electrode            % measurement patterns
setting.MeasOpt = {'do_redundant','balance_meas'};                        % measurement options

%%% VERSION 1B: do adjacent measurements, with driving electrodes
% setting.MeasPat = '{ad}';   % mono = measure at each electrode            % measurement patterns
% setting.MeasOpt = {'do_redundant','balance_meas','meas_current'};         % measurement options

%%% VERSION 2: do single electrode measurements, with driving electrodes
% setting.MeasPat = '{mono}'; % mono = measure at each electrode            % measurement patterns
% setting.MeasOpt = {'do_redundant','meas_current','balance_meas'};         % measurement options

% conductivity values as used in the Rensselaer phantom
setting.TissueCond = 0.42;                                                % tissue conductivity
setting.LungCond   = 0.24;                                                % pig.lung conductivity
setting.HeartCond  = 0.75;                                                % pig.heart conductivity

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fprintf('-------------------------------------------------------------\n');
fprintf('--- EIT with the Newton-type algorithm MANTIS ---------------\n');
fprintf('--- Winkler and Rieder, IOP Inverse Problems 31 (2015) ------\n');
fprintf('--- doi:10.1088/0266-5611/31/4/045009 -----------------------\n');
fprintf('--- Conductivity Reconstruction from simulated data. --------\n');
fprintf('-------------------------------------------------------------\n');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% generate a model %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% We need to compute some quantities to generate the EIDORS model %%%%%%%%
dom.ForwardMeshSize = dom.FEMscal*dom.Radius*0.10;                        % forward mesh size 
dom.InverseMeshSize = dom.FEMscal*dom.Radius*0.15;                        % inverse mesh size

el.N      = el.Npp*el.P;                                                  % number of electrodes
el.ZPos   = dom.Height*linspace(1/(el.P+1),el.P/(el.P+1),el.P);           % vertical positions of electrode planes
el.ForwardMeshSize = 0.04*dom.ForwardMeshSize;                            % electrode forward mesh size (making electrodes really fine is important!)
el.InverseMeshSize = 0.04*dom.InverseMeshSize;                            % electrode inverse mesh size (making electrodes really fine is important!)
el.PEM = 0;                                                               % point electrodes (1), CEM (0)

calc_colours('ref_level',setting.TissueCond);                             % set "background" color for plot
calc_colours('clim',0.90*setting.TissueCond);                             % set range

ref.Cond = 1;                                                             % ref. conductivity used for computing initial guesses
ref.Impedance = num2cell(0.5*el.Sizes);                                   % ref. contact impedance used for computing initial guesses

reco.cmin     = 1e-4;                                                     % minimal allowed conductivity
reco.cmax     = 1/reco.cmin;                                              % maximal allowed conductivity
reco.zmin     = 1e-5;                                                     % minimal allowed contact impedance
reco.verbose  = 2; % 0=quiet, 1=timing, 2=timing+some info, 3=all info.   % verbosity level

%% we use the shape information from the "CT2.mat" EIDORS contribution %%%%
% CT2.mat from http://eidors3d.sourceforge.net/tutorial/netgen/extrusion/pig_body.shtml
if exist('CT2.mat','file') ~= 2
   disp('Downloading CT2.mat for use in this example...');
   disp('The image is from a CT of a piglet with EIT electrodes, courtesy of Marc Bodenstein, Universit√§t Mainz.');
   urlwrite('http://eidors3d.sourceforge.net/tutorial/netgen/extrusion/CT2.mat','CT2.mat');
end
pig = load('CT2.mat');
% scale entire setting to [-1 1]^2
pig.Cnt  = (max(pig.trunk)+min(pig.trunk))./2;
pig.Size = (min(pig.trunk)-max(pig.trunk));
pig.Scl  = dom.Radius*max(pig.Size)/2;

pig.trunk = [pig.trunk(:,1)-pig.Cnt(1) pig.trunk(:,2)-pig.Cnt(2)]./pig.Scl;
pig.lung  = [pig.lung(:,1)-pig.Cnt(1)  pig.lung(:,2)-pig.Cnt(2) ]./pig.Scl;
pig.lung  = flipud(pig.lung(1:3:end,:));                                  % coarsen, correct order

% there were some issues with netgen...
netgenElPar = 4;

%% generate extruded model %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
dom.hct = [0,0.5,0.7*dom.Height];                                         % center of "heart" ellipsoid
dom.hr  = [0.33,0.28,0.28*dom.Height];                                    % axis (half) widths
  
extra = {'obj', sprintf(...
  'solid obj = ellipsoid(%3.2f,%3.2f,%3.2f; %3.2f,0,0; 0,%3.2f,0; 0,0,%3.2f);', ...
  dom.hct(1),dom.hct(2),dom.hct(3),dom.hr(1),dom.hr(2),dom.hr(3))};
fmdl = ng_mk_extruded_model( ...                                          % generate 3D extruded pig model w/o extruded heart
  {dom.Height,{pig.trunk,pig.lung},{4,1},dom.ForwardMeshSize}, ...
  [el.Npp,1,el.ZPos],[el.Width,el.Height,el.ForwardMeshSize,el.PEM,netgenElPar],extra);

[fmdl.electrode.z_contact]       = deal(el.Impedance{:});                 % set contact impedances
[fmdl.stimulation,fmdl.meas_sel] = ...                                    % generate current patterns
  mk_stim_patterns(el.Npp, el.P, setting.CurrPat, ...
                   setting.MeasPat, setting.MeasOpt, setting.CurrAmp);

img = mk_image(fmdl,1);                                                   % make "image" object

%% set conductivity values %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
img.elem_data(fmdl.mat_idx{1}) = setting.TissueCond;                      % set pig tissue conductivity
img.elem_data(fmdl.mat_idx{2}) = setting.HeartCond;                       % set pig heart  conductivity
img.elem_data(fmdl.mat_idx{3}) = setting.LungCond;                        % set pig lung   conductivity


%% plot true conductivity %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
fg = figure('Color','w','Position',[20, 400, 1200, 800]);

subplot(4,6,[1  2  7  8]); show_fem(img); view([-140,24]);                % 3D FEM plot of "true" conductivity
subplot(4,6,[3 4 9 10 15 16 21 22]);
nSlices = 2*el.P+1;                                                       % number of slices to display
show_slices(img,[inf(nSlices,2), ...                                      % display some horizontal slices of "true" conductivity
  dom.Height*linspace(nSlices/(nSlices+1),1/(nSlices+1),nSlices)']);
drawnow;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% generate measurement data %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
data = fwd_solve(img);                                                    % simulate data

rng('default');
N = randn(size(data.meas));
N = (setting.RelNoise*norm(data.meas,'fro')/norm(N,'fro'))*N;             % generate noise vector with correct noise level
VM = data.meas+N;                                                         % add noise to measurements
stim = img.fwd_model.stimulation;                                         % needed e.g. for estimating noise

% clear objects used for generating data. Only noisy data "VM" remains.
%clear fmdl img data; 
%eidors_cache clear;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% generate inverse model (coarser, avoid inverse crime) %%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
imdl = ng_mk_extruded_model( ...                                          % generate 3D extruded pig model
  {dom.Height,{pig.trunk} , 4, dom.InverseMeshSize}, ...
  [el.Npp,1,el.ZPos], [el.Width,el.Height,el.InverseMeshSize,el.PEM,netgenElPar]);

[imdl.electrode.z_contact] = deal(ref.Impedance{:});                      % set arbitrary (reference) contact impedances
[imdl.stimulation,imdl.meas_sel] = ...                                    % generate current patterns
  mk_stim_patterns(el.Npp, el.P, setting.CurrPat, ...
  setting.MeasPat, setting.MeasOpt, setting.CurrAmp);

imgi = mk_image(imdl,1);                                                  % make "image" object
imgi.elem_data = ref.Cond*ones(size(imgi.elem_data));                     % set arbitrary (reference) conductivity

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% do default GN reconstruction with NOSER prior %%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% default GN iteration %%%%%%
% imdlGN = imdl;
% imdlGN.type = 'inv_model';
% imdlGN.fwd_model = imdl;
% imdlGN.solve = @inv_solve_abs_GN; %Default Gauss Newton solvers
% imdlGN.reconst_type = 'absolute';
% imdlGN.jacobian_bkgnd.value= setting.LungCond;
% 
% imdlGN.inv_solve_abs_GN.show_iterations = 0; %Show iteration progress
% imdlGN.inv_solve_abs_GN.max_iterations = 20; %Number of iterations
% imdlGN.inv_solve_abs_GN.verbose = 0;
% 
% %imdl.RtR_prior=@prior_laplace; hp = 1e-10;
% imdlGN.RtR_prior=@prior_noser; hp = 1e-4;
% imdlGN.hyperparameter.value = hp;
% 
% tGN=tic;
% img_n = inv_solve_abs_GN(imdlGN, data);
% tGN=toc(tGN);
% fprintf('Done.\n');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% do parameter-free reconstruction (MANTIS) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[imgR,m_v,xi_v,sd,m] = mantis_solve(imgi,VM,el,reco);

%% plot reconstructed conductivity %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
figure(fg);
subplot(4,6,[13 14 19 20]); show_fem(imgR);  view([-140,24]);             % 3D FEM plot of reconstructed conductivity
subplot(4,6,[5 6 11 12 17 18 23 24]);
show_slices(imgR,[inf(nSlices,2), ...                                     % display some horizontal slices of reconstructed conductivity
  dom.Height*linspace(nSlices/(nSlices+1),1/(nSlices+1),nSlices)']);
drawnow;


