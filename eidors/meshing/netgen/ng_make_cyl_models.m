function fmdl = ng_make_cyl_models(cyl_shape, elec_pos, ...
                  elec_shape, extra_ng_code);
% NG_MAKE_CYL_MODELS: create cylindrical models using netgen
% fmdl = ng_make_cyl_models(cyl_shape, elec_pos, elec_shape, extra_ng_code);
% 
% cyl_shape = {height, [radius, [maxsz]]}
%    if height = 0 -> calculate a 2D shape
%    radius (OPT)  -> (default = 1)
%    maxsz  (OPT)  -> max size of mesh elems (default = courase mesh)
%
% ELECTRODE POSITIONS:
%  elec_pos = [n_elecs_per_plane,z_planes] 
%     OR
%  elec_pos = [x,y,z] centres of each electrode (N_elecs x 3)
%
% ELECTRODE SHAPES::
%  elec_shape = {[width,height], [maxsz] } % Rectangular elecs
%     OR
%  elec_shape = {[radius], [maxsz] }  % Circular elecs
%     OR
%  elec_shape = {[radius,0], [maxsz] }  % Circular elecs
%     maxsz  (OPT)  -> max size of mesh elems (default = courase mesh)
%
% Specify either a common electrode shape or for each electrode
%
%
% USAGE EXAMPLES:
% Simple 3D cylinder. Radius = 1. No electrodes
%   fmdl= ng_make_cyl_models(3,{0}); 
% Simple 2D cylinder. Radius = 2. Set minsize to refine
%   fmdl= ng_make_cyl_models([0,2,.2],{0}); 

% (C) Andy Adler, 2009. Licenced under GPL v2 or v3
% $Id$

fnstem = tempname;
geofn= [fnstem,'.geo'];
meshfn= [fnstem,'.vol'];
fid=fopen(geofn,'w');

[tank_height, tank_radius, tank_maxh, is2D] = parse_shape(cyl_shape);

write_header(fid,tank_height,tank_radius,tank_maxh);
   fprintf(fid,'tlo bigcyl;\n');
fclose(fid);
   call_netgen( geofn, meshfn);

centres=[];

fmdl = ng_mk_fwd_model( meshfn, centres, 'ng', []);
if is2D
   fmdl = mdl2d_from3d(fmdl);
end

function [tank_height, tank_radius, tank_maxh, is2D] = ...
              parse_shape(cyl_shape);
   tank_height = cyl_shape(1);
   tank_radius = 1;
   tank_maxh   = 0;
   is2D = 0;

   if length(cyl_shape)>1;
      tank_radius=cyl_shape(2);
   end
   if length(cyl_shape)>2; 
      tank_maxh  =cyl_shape(3);
   end
   if tank_height==0;
      is2D = 1;
      tank_height = tank_radius/5; % 5 is needed to let netgen work 
   end

function write_header(fid,tank_height,tank_radius,maxsz);
   if maxsz==0; 
      maxsz = '';
   else
      maxsz = sprintf('-maxh=%f',maxsz);
   end

   fprintf(fid,'#Automatically generated by ng_make_cyl_models\n');
   fprintf(fid,'algebraic3d\n');
   fprintf(fid,'solid cyl=cylinder (0,0,0;0,0,%6.2f;%6.2f); \n', ...
           tank_height, tank_radius);
   fprintf(fid,['solid bigcyl= plane(0,0,0;0,0,-1)\n' ...
                'and  plane(0,0,%6.2f;0,0,1)\n' ...
                'and  cyl %s;\n'],tank_height,maxsz);  

function mdl2 = mdl2d_from3d(mdl3)
   mdl2 = eidors_obj('2D','fwd_model');
   mdl2.gnd_node = 1;
   bdy = find_boundary(mdl3.elems);
   vtx = mdl3.nodes;
   z_vtx = reshape(vtx(bdy,3), size(bdy) );
   lay0  = find( all(z_vtx==0,2) );
   bdy0  = bdy( lay0, :);
   
   vtx0  = unique(bdy0(:));
   mdl2.nodes = vtx(vtx0,1:2);

   nmap  = zeros(size(vtx,1),1); nmap(vtx0) = 1:length(vtx0);
   bdy0  = reshape(nmap(bdy0), size(bdy0) ); % renumber to new scheme
   mdl2.elems = bdy0;

% Manage Electrodes
   if ~isfield(mdl3,'electrode'); return; end

   mdl2.electrode = mdl3.electrode;
   for i=1:length(mdl2.electrode);
      enodes = nmap( mdl2.electrode(i).nodes );
      enodes(enodes==0) = []; % Remove 3D layers
      mdl2.electrode(i).nodes = enodes;
   end
